// Script para configurar el primer usuario administrador
require('dotenv').config({ path: '.env.local' });
const { UserManager, RoleManager, ActivityLogger } = require('./src/lib/airtable-admin.ts');
const { DEFAULT_ROLES } = require('./src/lib/auth.ts');

async function setupAdmin() {
  console.log('üöÄ Configuraci√≥n inicial del Panel de Administraci√≥n\n');
  
  try {
    // PASO 1: Verificar variables de entorno
    console.log('--- PASO 1: Verificando configuraci√≥n ---');
    const requiredVars = [
      'AIRTABLE_API_KEY',
      'AIRTABLE_BASE_ID',
      'AIRTABLE_USERS_TABLE',
      'AIRTABLE_ROLES_TABLE'
    ];
    
    const missingVars = requiredVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      console.log('‚ùå Variables de entorno faltantes:');
      missingVars.forEach(varName => console.log(`   ‚Ä¢ ${varName}`));
      console.log('\nüí° Agrega estas variables a tu .env.local:');
      console.log('AIRTABLE_USERS_TABLE=Users');
      console.log('AIRTABLE_ROLES_TABLE=Roles');
      console.log('AIRTABLE_SESSIONS_TABLE=User Sessions');
      console.log('AIRTABLE_ACTIVITY_LOG_TABLE=Activity Log');
      console.log('NEXTAUTH_SECRET=grupo_roso_secret_2024_cambiar_en_produccion');
      console.log('NEXTAUTH_URL=http://localhost:3000');
      return;
    }
    
    console.log('‚úÖ Variables de entorno configuradas correctamente');
    
    // PASO 2: Crear roles predefinidos
    console.log('\n--- PASO 2: Configurando roles del sistema ---');
    
    for (const roleData of DEFAULT_ROLES) {
      try {
        const existingRole = await RoleManager.getRoleByName(roleData.name);
        if (existingRole) {
          console.log(`‚úÖ Rol "${roleData.name}" ya existe`);
        } else {
          // Aqu√≠ necesitar√≠amos crear el rol en Airtable
          console.log(`üîÑ Creando rol "${roleData.name}"...`);
          console.log(`   Permisos: ${roleData.permissions.join(', ')}`);
          // TODO: Implementar creaci√≥n de roles
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  Error verificando rol "${roleData.name}": ${error.message}`);
      }
    }
    
    // PASO 3: Crear usuario administrador
    console.log('\n--- PASO 3: Creando usuario administrador ---');
    
    const adminEmail = 'admin@gruporoso.com';
    const adminPassword = 'Admin123!'; // Cambiar despu√©s del primer login
    
    try {
      // Verificar si ya existe
      const existingAdmin = await UserManager.getUserByEmail(adminEmail);
      
      if (existingAdmin) {
        console.log('‚úÖ Usuario administrador ya existe');
        console.log(`   Email: ${existingAdmin.email}`);
        console.log(`   Nombre: ${existingAdmin.name}`);
        console.log(`   Rol: ${existingAdmin.role}`);
      } else {
        console.log('üîÑ Creando usuario administrador...');
        
        const admin = await UserManager.createUser({
          email: adminEmail,
          password: adminPassword,
          name: 'Administrador Grupo Roso',
          role: 'Admin',
          company: 'Grupo Roso',
          phone: '+50588793873'
        });
        
        console.log('‚úÖ Usuario administrador creado exitosamente');
        console.log(`   Email: ${admin.email}`);
        console.log(`   Nombre: ${admin.name}`);
        console.log(`   Rol: ${admin.role}`);
        
        // Registrar actividad
        await ActivityLogger.logActivity(
          admin.id,
          'create',
          'user',
          admin.id,
          'Usuario administrador inicial creado',
          '127.0.0.1'
        );
      }
    } catch (error) {
      console.log(`‚ùå Error creando administrador: ${error.message}`);
      return;
    }
    
    // PASO 4: Probar autenticaci√≥n
    console.log('\n--- PASO 4: Probando autenticaci√≥n ---');
    
    try {
      const user = await UserManager.verifyCredentials(adminEmail, adminPassword);
      
      if (user) {
        console.log('‚úÖ Autenticaci√≥n funcionando correctamente');
        console.log(`   Usuario autenticado: ${user.name} (${user.email})`);
        
        // Registrar login de prueba
        await ActivityLogger.logActivity(
          user.id,
          'login',
          'system',
          undefined,
          'Login de prueba durante setup',
          '127.0.0.1'
        );
      } else {
        console.log('‚ùå Error en la autenticaci√≥n');
      }
    } catch (error) {
      console.log(`‚ùå Error probando autenticaci√≥n: ${error.message}`);
    }
    
    // PASO 5: Mostrar informaci√≥n de acceso
    console.log('\n--- CONFIGURACI√ìN COMPLETADA ---');
    console.log('üéâ Panel de administraci√≥n configurado exitosamente');
    console.log('\nüìã Credenciales de acceso:');
    console.log(`   Email: ${adminEmail}`);
    console.log(`   Contrase√±a: ${adminPassword}`);
    console.log('\n‚ö†Ô∏è  IMPORTANTE: Cambia la contrase√±a despu√©s del primer login');
    console.log('\nüîó Pr√≥ximos pasos:');
    console.log('   1. Configurar NextAuth.js');
    console.log('   2. Crear p√°ginas del panel (/admin)');
    console.log('   3. Implementar middleware de autenticaci√≥n');
    console.log('   4. Crear interfaces de gesti√≥n');
    
  } catch (error) {
    console.error('‚ùå Error durante la configuraci√≥n:', error);
  }
}

// Ejecutar configuraci√≥n
setupAdmin().catch(console.error);
