// Demostraci√≥n de encriptaci√≥n de contrase√±as con bcrypt
const bcrypt = require('bcryptjs');

async function demoPasswordEncryption() {
  console.log('üîê Demostraci√≥n de Encriptaci√≥n de Contrase√±as\n');
  
  // Contrase√±a original del usuario
  const originalPassword = "MiContrase√±aSegura123";
  console.log(`üìù Contrase√±a original: "${originalPassword}"`);
  
  // PASO 1: ENCRIPTAR (al registrar usuario)
  console.log('\n--- PASO 1: REGISTRO DE USUARIO ---');
  console.log('üîÑ Encriptando contrase√±a...');
  
  const saltRounds = 12; // Nivel de seguridad (m√°s alto = m√°s seguro pero m√°s lento)
  const hashedPassword = await bcrypt.hash(originalPassword, saltRounds);
  
  console.log(`‚úÖ Hash generado: "${hashedPassword}"`);
  console.log(`üìè Longitud del hash: ${hashedPassword.length} caracteres`);
  console.log('üíæ Este hash es lo que se guarda en Airtable (NO la contrase√±a original)');
  
  // PASO 2: VERIFICAR (al hacer login)
  console.log('\n--- PASO 2: LOGIN DE USUARIO ---');
  
  // Simulamos diferentes intentos de login
  const loginAttempts = [
    { password: "MiContrase√±aSegura123", description: "Contrase√±a correcta" },
    { password: "MiContrase√±aSegura124", description: "Contrase√±a incorrecta (n√∫mero diferente)" },
    { password: "micontrase√±asegura123", description: "Contrase√±a incorrecta (may√∫sculas diferentes)" },
    { password: "", description: "Contrase√±a vac√≠a" }
  ];
  
  for (const attempt of loginAttempts) {
    console.log(`\nüîç Probando: "${attempt.password}" (${attempt.description})`);
    const isValid = await bcrypt.compare(attempt.password, hashedPassword);
    console.log(`${isValid ? '‚úÖ' : '‚ùå'} Resultado: ${isValid ? 'ACCESO PERMITIDO' : 'ACCESO DENEGADO'}`);
  }
  
  // PASO 3: DEMOSTRAR UNICIDAD
  console.log('\n--- PASO 3: UNICIDAD DE HASHES ---');
  console.log('üîÑ Generando m√∫ltiples hashes de la misma contrase√±a...');
  
  for (let i = 1; i <= 3; i++) {
    const hash = await bcrypt.hash(originalPassword, saltRounds);
    console.log(`Hash ${i}: ${hash}`);
  }
  
  console.log('üí° Nota: Cada hash es diferente, pero todos validan la misma contrase√±a');
  
  // PASO 4: SEGURIDAD
  console.log('\n--- PASO 4: CARACTER√çSTICAS DE SEGURIDAD ---');
  console.log('üõ°Ô∏è  Caracter√≠sticas del hash bcrypt:');
  console.log('   ‚Ä¢ $2b$ = Versi√≥n de bcrypt');
  console.log('   ‚Ä¢ $12$ = N√∫mero de rondas (2^12 = 4,096 iteraciones)');
  console.log('   ‚Ä¢ Siguientes 22 chars = Salt aleatorio');
  console.log('   ‚Ä¢ Resto = Hash de la contrase√±a + salt');
  console.log('   ‚Ä¢ IMPOSIBLE de revertir a la contrase√±a original');
  console.log('   ‚Ä¢ Resistente a ataques de diccionario y rainbow tables');
}

// Ejecutar la demostraci√≥n
demoPasswordEncryption().catch(console.error);
